<project name="NJS Wrapper Service" default="compile" basedir=".">

  <description>
      Build war-file for the NJS Wrapper Service
  </description>

  <!-- set global properties for this build -->
  <property name="src" location="src"/>
  <property name="dist" location="dist"/>
  <property name="classes" location="classes"/>
  <property name="jar.file" value="NJSWrapper.jar"/>
  <property name="war.file" value="NJSWrapper.war"/>
  <property name="war" value="war"/>
  <property name="war.lib" value="${war}/lib"/>
  <property name="docs" value="docs"/>
  <property name="jarsdir" value="../jars/lib/jars"/>
  <property name="deploycfg" value=""/>
  <property name="cmd.file" value="run_async_srv_method.sh"/>

  <condition property="java.home" value="${env.JAVA_HOME}" else="/kb/runtime/java">
    <isset property="env.JAVA_HOME" />
  </condition>

  <fileset dir="${jarsdir}" id="serverlib">
    <include name="joda/joda-time-2.2.jar"/>
    <include name="ini4j/ini4j-0.5.2.jar"/>
    <include name="jetty/jetty-all-7.0.0.jar"/>
    <include name="jna/jna-3.4.0.jar"/>
    <include name="servlet/servlet-api-2.5.jar"/>
    <include name="syslog4j/syslog4j-0.9.46.jar"/>
    <include name="junit/junit-4.9.jar"/>
    <include name="kbase/auth/kbase-auth-0.4.4.jar"/>
    <include name="jackson/jackson-annotations-2.2.3.jar"/>
    <include name="jackson/jackson-core-2.2.3.jar"/>
    <include name="jackson/jackson-databind-2.2.3.jar"/>
    <include name="kbase/common/kbase-common-0.0.23.jar"/>
    <include name="kbase/workspace/WorkspaceClient-0.6.0.jar"/>
    <include name="derby/derby-10.10.1.1.jar"/>
    <include name="easymock/easymock-3.2.jar"/>
    <include name="kbase/shock/shock-client-0.0.15.jar"/>
    <include name="apache_commons/http/httpclient-4.3.1.jar"/>
    <include name="apache_commons/http/httpcore-4.3.jar"/>
    <include name="apache_commons/http/httpmime-4.3.1.jar"/>
    <include name="bouncycastle/bcprov-jdk15on-1.51.jar"/>
    <include name="dockerjava/docker-java-1.3.0.jar"/>
    <include name="jaxrs/javax.ws.rs-api-2.0.jar"/>
    <include name="jersey/jersey-client-2.11.jar"/>
    <include name="jersey/jersey-common-2.11.jar"/>
    <include name="hk2/hk2-api-2.3.0-b05.jar"/>
    <include name="slf4j/slf4j-api-1.7.7.jar"/>
    <include name="jersey/jersey-guava-2.11.jar"/>
    <include name="jersey/jersey-apache-connector-2.11.jar"/>
    <include name="hk2/javax.inject-2.3.0-b05.jar"/>
    <include name="jackson/jackson-jaxrs-json-provider-2.1.2.jar"/>
    <include name="hk2/aopalliance-repackaged-2.3.0-b05.jar"/>
    <include name="bouncycastle/bcpkix-jdk15on-1.51.jar"/>
    <include name="cglib/cglib-nodep-2.2.jar"/>
    <include name="apache_commons/commons-compress-1.5.jar"/>
    <include name="testinfected/core-matchers-1.6.jar"/>
    <include name="hamcrest/hamcrest-core-1.3.jar"/>
    <include name="hamcrest/hamcrest-library-1.3.jar"/>
    <include name="hk2/hk2-locator-2.3.0-b05.jar"/>
    <include name="hk2/hk2-utils-2.3.0-b05.jar"/>
    <include name="jackson/jackson-module-jaxb-annotations-2.1.2.jar"/>
    <include name="annotation/javax.annotation-api-1.2.jar"/>
    <include name="testinfected/jpa-matchers-1.6.jar"/>
    <include name="lambdaj/lambdaj-2.3.3.jar"/>
    <include name="logback/logback-classic-1.1.2.jar"/>
    <include name="logback/logback-core-1.1.2.jar"/>
    <include name="objenesis/objenesis-1.2.jar"/>
    <include name="hk2/osgi-resource-locator-1.0.1.jar"/>
    <include name="persistence/persistence-api-1.0.jar"/>
    <include name="gesellix/unix-socket-factory-2015-01-27T15-02-14.jar"/>
    <include name="apache_commons/commons-codec-1.8.jar"/>
    <include name="google/guava-18.0.jar"/>
    <include name="apache_commons/commons-io-2.4.jar"/>
    <include name="apache_commons/commons-logging-1.1.1.jar"/>
    <include name="apache_commons/commons-lang-2.4.jar"/>
    <include name="apache_commons/commons-lang3-3.1.jar"/>
    <include name="mongo/mongo-java-driver-2.13.3.jar"/>
    <include name="jongo/jongo-0.5-early-20130912-1506.jar"/>
    <include name="bson4jackson/bson4jackson-2.2.0-2.2.0.jar"/>
  </fileset>

  <path id="compile.classpath">
    <fileset refid="serverlib"/>
  </path>

  <target name="init" description="make directories">
    <!-- Create the output directory structure-->
    <mkdir dir="${classes}"/>
    <mkdir dir="${dist}"/>
  </target>

  <target name="compile" depends="init" description="compile the source">
    <exec executable="git" outputproperty="git.url"><arg line="config --get remote.origin.url"/></exec>
    <exec executable="git" outputproperty="git.branch"><arg line="rev-parse --abbrev-ref HEAD"/></exec>
    <exec executable="git" outputproperty="git.commit"><arg line="rev-parse HEAD"/></exec>
    <echo file="${src}/us/kbase/narrativejobservice/git.properties">### PLEASE DO NOT CHANGE THIS FILE MANUALLY! ###
giturl=${git.url}
branch=${git.branch}
commit=${git.commit}</echo>
  	<!-- Compile class files-->
    <javac destdir="${classes}" includeantruntime="false" target="1.7" source="1.7" debug="true" classpathref="compile.classpath">
      <src path="${src}"/>
    </javac>
    <!-- Copy resource files-->
    <copy todir="${classes}">
      <fileset dir="${src}">
      </fileset>
    </copy>
    <jar destfile="${dist}/${jar.file}" basedir="${classes}"/>
    <delete dir="${classes}"/>
  </target>

  <target name="war" depends="compile" description="build the WAR file. Assumes compile has been run">
    <!-- make the war file for the server-->
    <mkdir dir="${war.lib}"/>
    <copy todir="${war.lib}/" flatten="true">
      <fileset refid="serverlib"/>
      <resources>
        <file file="${dist}/${jar.file}"/>
      </resources>
    </copy>
    <war destfile="${dist}/${war.file}" webxml="${war}/web.xml">
      <lib dir="${war.lib}"/>
    </war>
    <delete dir="${war.lib}"/>
    <delete dir="${classes}"/>
  </target>

  <target name="script" depends="compile" description="create AWE command-line script">
  	<copy file="${dist}/${jar.file}" todir="${jardir}"/>
    <property name="jar.absolute.path" location="${jardir}/${jar.file}"/>
    <pathconvert targetos="unix" property="lib.classpath" refid="compile.classpath"/>
    <echo file="${bindir}/${cmd.file}">#!/bin/sh
export JAVA_HOME=${java.home}
export PATH=${java.home}/bin:$PATH
java -cp ${jar.absolute.path}:${lib.classpath} us.kbase.narrativejobservice.sdkjobs.SDKLocalMethodRunner $1 $2 $3 $4 >job_out.txt 2>job_err.txt
    </echo>
    <chmod file="${bindir}/${cmd.file}" perm="a+x"/>
  </target>

  <!-- The following stanza is for building the docker image run_async script, needed because paths
    are very, very different from what the script target above assumes -->
  <target name="script_docker" depends="compile" description="create AWE command-line script for docker image">
    <copy todir="${jardir}/" flatten="true">
      <fileset refid="serverlib"/>
      <resources>
        <file file="${dist}/${jar.file}"/>
      </resources>
    </copy>
    <echo file="${bindir}/${cmd.file}">#!/bin/sh
export JAVA_HOME=${java.home}
export PATH=${java.home}/bin:$PATH
java -cp "${image.classpath}/*" us.kbase.narrativejobservice.sdkjobs.SDKLocalMethodRunner $1 $2 $3 $4 >job_out.txt 2>job_err.txt
# java -cp ${image.classpath}/${jar.file}:${image.classpath} us.kbase.narrativejobservice.sdkjobs.SDKLocalMethodRunner $1 $2 $3 $4 >job_out.txt 2>job_err.txt
    </echo>
    <chmod file="${bindir}/${cmd.file}" perm="a+x"/>
  </target>


  <target name="docs" description="prepare documentation">
    <mkdir dir="${docs}"/>
  </target>

  <target name="preparejunitreportdir" if="env.JENKINS_REPORT_DIR">
    <delete dir="${env.JENKINS_REPORT_DIR}"/>
    <mkdir dir="${env.JENKINS_REPORT_DIR}"/>
  </target>

  <target name="shockmigscript" depends="compile" description="create script to run shock->mongo migration">
    <pathconvert targetos="unix" property="lib.classpath" refid="compile.classpath"/>
    <echo file="./migrate_shock_data_to_mongo.sh">#!/bin/sh
java -cp ${dist}/${jar.file}:${lib.classpath} us.kbase.narrativejobservice.db.MigrateShockDataToMongo $1 $2 $3 $4
    </echo>
    <chmod file="./migrate_shock_data_to_mongo.sh" perm="a+x"/>
  </target>

  <target name="test" depends="compile, preparejunitreportdir" description="run all tests">
    <!-- Define absolute path to main jar file-->
    <junit printsummary="yes" haltonfailure="yes" fork="true">
      <classpath>
        <pathelement location="${dist}/${jar.file}"/>
        <path refid="compile.classpath"/>
      </classpath>
      <formatter type="plain" usefile="false" />
      <formatter type="xml" usefile="true" if="env.JENKINS_REPORT_DIR"/>
      <batchtest todir="${env.JENKINS_REPORT_DIR}">
        <fileset dir="${src}">
          <include name="**/test/**/**Test.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="testCondor" depends="compile, preparejunitreportdir" description="run all tests">
    <!-- Define absolute path to main jar file-->
    <junit printsummary="yes" haltonfailure="yes" fork="true">
      <classpath>
        <pathelement location="${dist}/${jar.file}"/>
        <path refid="compile.classpath"/>
      </classpath>
      <formatter type="plain" usefile="false" />
      <formatter type="xml" usefile="true" if="env.JENKINS_REPORT_DIR"/>
      <batchtest todir="${env.JENKINS_REPORT_DIR}">
        <fileset dir="${src}">
          <include name="**/test/**/CondorTest.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="testCondorIntegration" depends="compile, preparejunitreportdir" description="run all tests">
    <!-- Define absolute path to main jar file-->
    <junit printsummary="yes" haltonfailure="yes" fork="true">
      <classpath>
        <pathelement location="${dist}/${jar.file}"/>
        <path refid="compile.classpath"/>
      </classpath>
      <formatter type="plain" usefile="false" />
      <formatter type="xml" usefile="true" if="env.JENKINS_REPORT_DIR"/>
      <batchtest todir="${env.JENKINS_REPORT_DIR}">
        <fileset dir="${src}">
          <include name="**/test/**/CondorIntegrationTest.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="testReaper" depends="compile, preparejunitreportdir" description="run all tests">
    <!-- Define absolute path to main jar file-->
    <junit printsummary="yes" haltonfailure="yes" fork="true">
      <classpath>
        <pathelement location="${dist}/${jar.file}"/>
        <path refid="compile.classpath"/>
      </classpath>
      <formatter type="plain" usefile="false" />
      <formatter type="xml" usefile="true" if="env.JENKINS_REPORT_DIR"/>
      <batchtest todir="${env.JENKINS_REPORT_DIR}">
        <fileset dir="${src}">
          <include name="**/test/**/ReaperTest.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>


  <target name="clean" description="clean up" >
    <!-- Clean up internal temporary files and folders-->
    <delete dir="${classes}"/>
    <delete dir="${dist}"/>
  </target>
</project>

